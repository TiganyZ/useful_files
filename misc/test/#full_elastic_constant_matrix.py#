
""" 
 This is a file which is to evaluate the elastic constants in both relaxed and unrelaxed configurations
 According to Clouet (2012) and Cousins (1979), in a strained hcp lattice there are internal degrees of freedom
 that are not accounted for when applying a homogeneous strain.
 This is necessary for C_11, C_12 and C_66 elastic constants.
 Two of these inner elastic constants, e11, e33, are related to the phonon frequencies of the optical branches at the gamma point.
 omega_i = s * np.sqrt( Omega * e_ii / m )
 Where Omega = a**2 * c * 3**(0.5) / 2 (The atomic volume), and m is the mass
 The inner elastic constants d_21 couples the internal degrees of freedom to the homogeneous strain, leading to a contribution:
 delta * C_12 = d_21**2 / e_11
 C^0_ij are the unrelaxed elastic constants
 The true elastic constants are then given by 
 C_{11} = C^0_{11} - delta * C_{12} 
 C_{12} = C^0_{11} + delta * C_{12} 
 C_{66} = C^0_{66} - delta * C_{12} 
 With all others being unchanged 


To get an elastic constant we have to make use of the relation that defines them 

stress_ij = C_ijkl * strain_kl

strain_kl = 0.5 * ( du_i/dx_j + du_j/dx_i )

Know that 

C_ijkl = 0.5 * (  d^2E/de_ijde_kl   )

Or we can use the formula from Sutton's book 



C_ijkl = -( 0.5 / V_prim_unit_cell ) * ( sum_{p != n}  ( X_k_(p) - X_k_(n)} ) S_ij_(np)  \big( X_l^{(p) - X_l_(n)   )

S_{ij}^{(np)} =  \frac{\partial E}{\partial u_i^{(n)} \partial u_j^{(p)} } 


 C_{ikjl} = -\frac{1}{8\Omega}  \Big\{ 
    &\sum_{p\neq n}\big( X_k^{(p)} - X_k^{(n)} \big) S_{ij}^{(np)}  \big( X_l^{(p)} - X_l^{(n)}  \big) \\
  + &\sum_{p\neq n}\big( X_i^{(p)} - X_i^{(n)} \big) S_{kj}^{(np)}  \big( X_l^{(p)} - X_l^{(n)}  \big) \\
  + &\sum_{p\neq n}\big( X_k^{(p)} - X_k^{(n)} \big) S_{il}^{(np)}  \big( X_j^{(p)} - X_j^{(n)}  \big) \\
  + &\sum_{p\neq n}\big( X_i^{(p)} - X_i^{(n)} \big) S_{kl}^{(np)}  \big( X_j^{(p)} - X_j^{(n)}  \big)  \Big\}


"""

import numpy as np
import scipy as sci
from scipy.optimize import minimize
import subprocess
import matplotlib.pyplot as plt
from matplotlib import rc
rc('font', **{'family': 'serif', 'serif': ['Palatino'],  'size': 18})
rc('text', usetex=True)
sci.set_printoptions(linewidth=200, precision=4)

#==========================================================================
############################    General    ################################
#==========================================================================
def cmd_result(cmd):
    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    result, err = proc.communicate()
    result = result.decode("utf-8")
    return result


def cmd_write_to_file(cmd, filename):
    output_file = open(filename, mode='w')
    retval = subprocess.call(cmd, shell=True, stdout=output_file)
    output_file.close()



#========================================================================================
############################    Get Elastic Constants    ################################
#========================================================================================

def Cijkl(X_p, X_n, S_np, V_prim_uc):
    # X_n, X_p are the original positons of the atoms.
    # S_np is the force constant matrix: S_ij^(np) =  d^2 E/d u_i^(n) d u_j^(p)
    C = np.zeros((3, 3, 3, 3))
    if X_p is not X_n:
        for i in range(3):
            for k in range(3):
                for j in range(3):
                    for l in range(3):
                        C[i, k, j, l] = -(0.5 / V_prim_uc) * \
                            ((X_p[k] - X_n[k]) * S_np[i, j] * (X_p[l] - X_n[l]))
                        print(
                            "C_{:d}{:d}{:d}{:d} = {:.10f} Ryd/bohr^3".format(i, k, j, l, C[i, k, j, l]))
    return C


def S_np(LMarg, h, alat, check_pos_def=True,
         use_forces=False, second_order=False):
    # Force constant matrix defined to be Phi_ij(M,N) = change in Energy with respect to displacements U_i(M) and U_j(N).
    # h is degree of displacements.

    Phi0 = find_energy(LMarg, args, 'forceconstant')

    # First atom displacements
    ai = ("ai", 0)
    aj = ("aj", 0)
    ak = ("ak", 0)
    arr = [ai, aj, ak]

    # Second atom displacements
    aii = ("aii", 0)
    ajj = ("ajj", 0)
    akk = ("akk", 0)
    arr2 = [aii, ajj, akk]

    Phi = np.zeros((3, 3))

    if use_forces:
        m_11 = np.zeros((3, 3))
        m_12 = np.zeros((3, 3))
        m_21 = np.zeros((3, 3))
        m_22 = np.zeros((3, 3))

        for i in range(3):
            a = arr[i]
            print("Derivatives using ", a)
            da1, da2 = cds_second_order(args, a, h, alat=alat)
            m_11[:, i] = -da1
            m_21[:, i] = -da2

        for i in range(3):
            a = arr2[i]
            print("Derivatives using ", a)
            da1, da2 = cds_second_order(args, a, h, alat=alat)
            m_22[:, i] = -da1
            m_12[:, i] = -da2

        Phi[:3, :3] = m_11
        Phi[3:, :3] = m_21
        Phi[:3, 3:] = m_12
        Phi[3:, 3:] = m_22

    else:
        for i in range(3):
            a1 = arr[i]
            for j in range(3):
                a2 = arr2[j]
                Phi[i, j] = cds_fourth_order(
                    args, a1, a2, h, second_order=second_order, alat=alat)
                print(Phi[i, j])

    print(Phi)
    
    return Phi



def contract_index(i, j):

    if i == j:
        if i == 1 - 1:
            i1 = 1 - 1
        elif i == 2 - 1:
            i1 = 2 - 1
        elif i == 3 - 1:
            i1 = 3 - 1
    elif i == 1 - 1:
        if j == 2 - 1:
            i1 = 6 - 1
        elif j == 3 - 1:
            i1 = 8 - 1
    elif i == 2 - 1:
        if j == 3 - 1:
            i1 = 4 - 1
        elif j == 1 - 1:
            i1 = 9 - 1
    elif i == 3 - 1:
        if j == 1 - 1:
            i1 = 5 - 1
        elif j == 2 - 1:
            i1 = 7 - 1
    return i1

def get_Q_rot(a):
    b = np.zeros((9, 9))
    for i in range(3):
        for j in range(3):
            for k in range(3):
                for l in range(3):
                    i1 = contract_index(i, j)
                    i2 = contract_index(k, l)
                    b[i1][i2] = a[k][i] * a[l][j]
    return b

def get_Cij(C):
    new_C = np.zeros((9,9))
    for i in range(3):
        for j in range(3):
            for k in range(3):
                for l in range(3):
                    i1 = contract_index(i, j)
                    i2 = contract_index(k, l)
                    new_C[i1,i2] = C[i,j,k,l]
    return new_C

def c_transform(C, a):
    Q = get_Q_rot(a)
    C_t = Q.T.dot(C.dot(Q))
    return C_t

def get_elastic_constants_from_energy(LMarg, X_n, X_p, V_prim_uc, h, alat, 
                                      use_forces=False, second_order=False):

    S = S_np(LMarg, h, check_pos_def=True, alat=alat,
         use_forces=use_forces, second_order=second_order)
    Cijkl = Cijkl(X_p, X_n, S, V_prim_uc)
    C = get_Cij(Cijkl)
    print("Elastic constant matrix:\n",C)

    print("\n Checking Stability for tbe elastic constants. \n")
    is_stable = np.all(np.linalg.eigvals( C ) > 0)
    print("is positive definite = ", is_stable)
    print(is_stability_satisfied(C[0,0], C[2,2], C[3,3], C[0,1], C[0,2]))

    return C

#========================================================================================
############################    Get min lp and energy    ################################
#========================================================================================

def lp_hcp_energy(x):
    ext = "ti"
    vargs = ' '
    etot = find_energy(' tbe ' + ext + ' ', (vargs + ' -vahcp=' + str(x[0]) + ' -vchcp=' + str(x[1])
                                             + ' -vnk=30 '),
                       'lpmin')
    return etot


def lp_omega_energy(x):
    ext = "ti"
    vargs = ' '
    etot = find_energy(' tbe ' + ext + ' ', (vargs + ' -vomega=1 -vhcp=0 -vaomega=' + str(x[0])
                                             + ' -vqomega=' +
                                             str(x[1]) + ' -vuomega=' +
                                             str(x[2])
                                             + ' -vnk=30 '),
                       'lpmin')
    return etot


def find_energy(LMarg, args, filename):
    cmd = LMarg + ' ' + args
    cmd_write_to_file(cmd, filename)
    if 'lmf' in LMarg:
        cmd = "grep 'ehk' " + filename + \
            " | tail -2 | grep 'From last iter' | awk '{print $5}'"
    elif 'tbe' in LMarg:
        cmd = "grep 'total energy' " + filename + \
            " | tail -1 | awk '{print $4}'"
    etot = cmd_result(cmd)
    print(etot)
    try:
        etot = float(etot[0:-1])
    except ValueError:
        cmd = "grep 'Exit' " + filename + " "
        error = cmd_result(cmd)
        print(str(error))
        print(' Error: \n       ' + str(error) +
              ' From file ' + filename + ' \n Exiting...')
        etot = 'error'
    return etot


def get_min_lp(phase="hcp"):

    if phase == "hcp":
        x0 = np.array([a_hcp_exp, c_hcp_exp])
        fnc = lp_hcp_energy
    elif phase == "omega":
        x0 = np.array([a_omega_exp, q_omega_exp, u_omega_exp])
        fnc = lp_omega_energy

    try:
        ret = minimize(fnc, x0, method='Nelder-Mead',
                       options={'disp': True, 'fatol': 1e-10})
    except TypeError:
        print("Could not find the minimum lattice parameter, exiting...")
        ret = 0
    if phase == "hcp":
        ret = ret['x'][0], ret['x'][1], ret['fun']
    elif phase == "omega":
        ret = ret['x'][0], ret['x'][1], ret['x'][2], ret['fun']
    return ret



#==========================================================================================================
############################    Check if ec matrix is positive definite    ################################
#==========================================================================================================

def is_positive_definite(c11, c33, c44, c12, c13, C=None):

    if C is None:
        C_arr = sci.array(
        [
            [c11,  c12,  c13,  0.,  0.,  0.],
            [c12,  c12,  c13,  0.,  0.,  0.],
            [c13,  c13,  c33,  0.,  0.,  0.],
            [0.,   0.,   0.,  c44, 0.,  0.],
            [0.,   0.,   0.,  0., c44,  0.],
            [0.,   0.,   0.,  0.,  0., c66]]
        )
    else:
        C_arr = C

    is_stable = np.all(np.linalg.eigvals(C_arr) > 0)

    print("is positive definite = ", is_stable)
    return np.all(np.linalg.eigvals(C_arr) > 0)


def is_stability_satisfied(C_11, C_33, C_44, C_12, C_13):
    print("\n   Criteria for stability:\n")

    c1 = C_11 - C_12 > 0
    print("C_11 - C_12 > 0 \n", c1)

    c2 = C_11 + C_12 + C_33 > 0
    print(" C_11 + C_12 + C_33 > 0 \n", c2)

    c3 = (C_11 + C_12) * C_33 - 2 * C_13**2 > 0
    print("( C_11 + C_12 ) * C_33 - 2 * C_13**2 > 0 \n", c3)

    c4 = C_44 > 0
    print("C_44 > 0 \n", c4)

    c5 = (C_11 - C_12) > 0
    print("(C_11 - C_12) > 0\n", c5)

    c6 = (C_11 + C_12)*C_33 > 0
    print("( C_11 + C_12 )*C_33 > 0 \n", c6)

    c7 = C_11 + C_12 > 0
    print("C_11 + C_12 > 0\n ", c7)

    c8 = C_33 > 0
    print("C_33 > 0\n", c8)

    c9 = C_11 > 0
    print("C_11 > 0\n", c9)


def cds_fourth_order(args, ai, aj, h, alat=5.57, second_order=False):

    ai_name, ai_val = ai
    aj_name, aj_val = aj

    n_disp = np.array([-2, -1, 1, 2])
    f_arr = np.zeros((len(n_disp), len(n_disp)))
    del_h_dict = {}

    if second_order:
        n_disp = np.array([-1, 1])
    for i, ni in enumerate(n_disp):
        for j, nj in enumerate(n_disp):
            xargs = args + " -v" + ai_name + "=" + \
                str(ni * h) + " -v" + aj_name + "=" + str(nj * h)
            print(xargs)
            f_arr[i, j] = find_energy(xargs, '',  'cds_fourth_order')
            del_h_dict[(ni, nj)] = (i, j)

    def fa(ni, nj): return f_arr[del_h_dict[(ni, nj)]]

    h *= alat
    if second_order:
        mixed_derivative = (1./(4. * h**2)) * (fa(-1, -1) +
                                               fa(1, 1) - fa(1, -1) - fa(-1, 1))
    else:
        mixed_derivative = (1. / (144. * h**2)) * (
            8. * (fa(1, -2) + fa(2, -1) + fa(-2, 1) + fa(-1, 2))
            - 8. * (fa(-1, -2) + fa(-2, -1) + fa(1, 2) + fa(2, 1))
            - 1. * (fa(2, -2) + fa(-2, 2) - fa(-2, -2) - fa(2, 2))
            + 64. * (fa(-1, -1) + fa(1, 1) - fa(1, -1) - fa(-1, 1)))

    print("\nDerivative = %s" % (mixed_derivative))

    return mixed_derivative


def cds_second_order(args, ai, h, alat=5.57):

    ai_name, ai_val = ai

    filename = 'force_derivatives'
    forces_atom_p1 = np.zeros(3)
    forces_atom_p2 = np.zeros(3)
    forces_atom_m1 = np.zeros(3)
    forces_atom_m2 = np.zeros(3)

    for j in [-1, 1]:
        cmd_write_to_file(args + " -v" + ai_name + "=" + str(j * h), filename)
        #print( cmd_result(" grep -A4 'Forces on atom' " + filename  ) )
        for i in range(3):
            greparg = " grep -A4 'Forces on atom' " + filename + \
                " | grep 'Total' | awk '{print$" + str(i + 3) + "}'"
            if j == -1:
                forces_atom_m1[i], forces_atom_m2[i] = tuple(
                    [float(x) for x in (cmd_result(greparg).strip('\n')).split()])
            else:
                forces_atom_p1[i], forces_atom_p2[i] = tuple(
                    [float(x) for x in (cmd_result(greparg).strip('\n')).split()])

    h *= alat
    derivatives1 = (forces_atom_p1 - forces_atom_m1) / (2. * h)
    derivatives2 = (forces_atom_p2 - forces_atom_m2) / (2. * h)
    print("For", ai)
    print("forces atom 1: - h = %s" % (forces_atom_m1))
    print("forces atom 2: - h = %s" % (forces_atom_m2))
    print("forces atom 1: + h = %s" % (forces_atom_p1))
    print("forces atom 2: + h = %s" % (forces_atom_p2))
    print("Derivative1 = %s" % (derivatives1))
    print("Derivative2 = %s" % (derivatives2))

    return derivatives1, derivatives2


args = ' tbe ti -vhcp=1 '  # + varg
ahcp = 5.5125
chcp = 8.8090
q = chcp/ahcp

h = 0.001
X_n = np.array([0.,0.,0.])
X_p = np.array( [ 1./(2*np.sqrt(3)) , -1/2., q/2 ] ) * alat
V_prim_uc = (3**(0.5) / 2) * ahcp**2 * chcp
Cij =  get_elastic_constants_from_energy(args, X_n, X_p, V_prim_uc, h, ahcp, 
                                      use_forces=False, second_order=False)


