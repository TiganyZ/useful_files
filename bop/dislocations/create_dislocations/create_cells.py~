import os
import scipy as sci
import numpy as np
import matplotlib.pyplot as pp
import matplotlib.ticker as ticker
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib import rcParams
from matplotlib import rc
rcParams["figure.figsize"] = 4, 3
rcParams["font.family"] = "serif"
rcParams["font.size"] = 8
rcParams["font.serif"] = ["DejaVu Serif"]
rc("text", usetex=True)
sci.set_printoptions(linewidth=200, precision=4)


class create_cell:
    def __init__(unit_cell, lengths, plat, nxyz, ninert, disl,
                 rcore=None, rcphi=0., rotation=np.eye(3), species="Ti",
                 cwd='./', output_path='./generated_dislocations',
                 filename='cell_gen', output='bop', geometry='quad'):

        self.disl = disl
        self.lengths = lengths
        self.final_lengths = lengths * nxyz

        if rcore == None:
            self.rcore = 0.5 * self.final_lengths
        else:
            self.rcore = rcore

        cwd = os.cwd()
        if os.path.isdir(output_path) is False:
            os.mkdir(output_path)

        try:
            os.chdir(output_path)
            print("Changed directory from {} to {}".format(cwd, output_path))
        except TypeError:
            print("Could not change directory from {} to {}".format(cwd, output_path))

    def write_bop_cell():

        file_ext = "_{}x_{}y_{}z".format(
            self.nxyz[0], self.nxyz[1], self.nxyz[2])
        cell_file = filename + file_ext + ".in"
        cell_file_inert = filename + file_ext + "_inert.in"
        xyz_file = filename + file_ext + ".xyz"
        out_file = open(cell_file,       mode='w+')
        out_inert_file = open(cell_inert_file, mode='w+')
        out_xyz_file = open(xyz_file,        mode='w+')

        out_file.write(" tig   hcp\n")
        out_file.write(" 1.0 0.0 0.0\n")
        out_file.write(" 0.0 1.0 0.0\n")
        out_file.write(" 0.0 0.0 1.0\n")
        out_file.write(" len " + str(flen[0])
                       + " " + str(flen[1])
                       + " " + str(flen[2]) + "\n")
        out_file.write(" latpar 1.0\n")
        out_file.write(" nd " + str(n_atoms) + "\n")

        out_xyz_file.write(str(n_atoms_tot) + "\n")
        out_xyz_file.write('Lattice=" ' + str(flen[0]) + ' 0.0 0.0   0.0 ' + str(
            flen[1]) + ' 0.0   0.0 0.0 ' + str(flen[2]) + '" Properties=species:S:1:pos:R:3 \n')

        counter = 0
        for i in range(nx):
            for j in range(ny):
                for k in range(nz):
                    for p in range(luc):
                        if screw:
                            r1 = (uc[p, 0] + i) * l[0]
                            r2 = (uc[p, 1] + j) * l[1]
                            r3 = (uc[p, 2] + k) * l[2]
                            r12 = np.sqrt(
                                (r1 - rcore[0]) ** 2 + (r3 - rcore[2]) ** 2)
                            s = self.disl.u_screw(C, b,
                                                  (r12 * np.cos(rcphi +
                                                                np.arctan2(r3-rcore[2], r1-rcore[0]))),
                                                  (r12 * np.sin(rcphi + np.arctan2(r3-rcore[2], r1-rcore[0]))))

                            r1 = (uc[p, 0] + i) * l[0]
                            r2 = (uc[p, 1] + j) * l[1] + s
                            # + u_screw(C, b, ( r12 * np.cos(rcphi + np.arctan2(r2-rcore[1],r1-rcore[0]) ) ), #( r1 - rcore[0] )
                            r3 = (uc[p, 2] + k) * l[2]
        #                                                                   ( r12 * np.sin(rcphi + np.arctan2(r2-rcore[1],r1-rcore[0]) ) ) )
                            #r3 =  ( uc[p][2] + k ) * l[2]  + u_screw(C, b, ( r1 - rcore[0]) , r2 - rcore[1])
                        elif edge:
                            r1 = (uc[p, 0] + i) * l[0] + \
                                u_edge(C, b, r1 - rcore[0], r2 - rcore[1])
                            r2 = (uc[p, 1] + j) * l[1] + \
                                u_edge(C, b, r1 - rcore[0], r2 - rcore[1])
                            r3 = (uc[p, 2] + k) * l[2]
                        else:
                            r1 = (uc[p][0] + i) * l[0]
                            r2 = (uc[p][1] + j) * l[1]
                            r3 = (uc[p][2] + k) * l[2]

                        #print("r1", r1, r1/flen[0], r1/l[0])
                        #print("r2", r2, r1/flen[1], r2/l[1])
                        #print("r3", r3, r1/flen[2], r3/l[2])
                        c0 = i < ninertx[0] or j < ninerty[0] or k < ninertz[0]
                        c1 = i > ninertx[1] or j > ninerty[1] or k > ninertz[1]
                        if c0 or c1:
                            counter += 1
                            out_inert_file.write(" " + species
                                                 + " " + str(r1 / flen[0])
                                                 + " " + str(r2 / flen[1])
                                                 + " " + str(r3 / flen[2])
                                                 + " 0.0 0.0"
                                                 + " \n")
                            out_xyz_file.write(" " + species + "n"
                                               + " " + str(r1)
                                               + " " + str(r2)
                                               + " " + str(r3)
                                               + " \n")
                        else:
                            out_file.write(" " + species
                                           + " " + str(r1 / flen[0])
                                           + " " + str(r2 / flen[1])
                                           + " " + str(r3 / flen[2])
                                           + " 0.0 0.0"
                                           + " \n")
                            out_xyz_file.write(" " + species
                                               + " " + str(r1)
                                               + " " + str(r2)
                                               + " " + str(r3)
                                               + " \n")
                        #print("Scaled Atomic Position: ", (uc[p][0] + i), (uc[p][1] + j), (uc[p][2] + k))
                        #print("Cartesian Atomic Position: ", (uc[p][0] + i)*l[0], (uc[p][1] + j)*l[1], (uc[p][2] + k)*l[2])

        print("Number of Inert atoms = %s" %(counter))
        print("Calculated number of Inert atoms = %s" %( nx * ny * nz *luc -  ninertx[-1] * ninerty[-1] * ninertz[-1] * luc ))
        print("ninert x,y,z",nx, ny, nz, ninertx[-1] , ninerty[-1] , ninertz[-1], luc, nx * ny * nx *luc ,  ninertx[-1] * ninerty[-1] * ninertz[-1] * luc )
        out_inert_file.close()
        out_inert_file = open(cell_inert_file, mode='r+')

        out_file.write(" ninert " + str(ninert) + "\n" )
        out_file.write( out_inert_file.read() )
        out_inert_file.close()

        out_file.write("\n nullheight       0.000000000000\n\n"  )

        out_file.write(" kspace_conf\n"  )
        out_file.write("   0 t         ! symmode symetry_enabled\n"  )
        out_file.write("   12 10 12    ! vnkpts\n"  )
        out_file.write("    t t t       ! offcentre\n\n"  )

        out_file.write("dislocation_conf\n"  )
        out_file.write("   0    ! gfbcon\n"  )
        out_file.write("   0.0  ! radiusi\n"  )
        out_file.write("   -100.0    100.0    -100.0  100.0\n"  )
        out_file.write("    0    ! gfbcon\n"  )
        out_file.write("   0.0  ! radiusi\n"  )
        out_file.write("   -100.0    100.0    -100.0  100.0\n"  )
        out_file.write("    0    ! gfbcon\n"  )
        out_file.write("   0.0  ! radiusi\n"  )
        out_file.write("   -100.0    100.0    -100.0  100.0\n"  )
        out_file.write("   0    ! gfbcon\n"  )
        out_file.write("   0.0  ! radiusi\n"  )
        out_file.write("   -100.0    100.0    -100.0  100.0\n"  )


        out_file.close()
        out_xyz_file.close()

    os.chdir(cwd)
